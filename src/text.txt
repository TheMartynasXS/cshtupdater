use dialoguer::{theme::ColorfulTheme, Confirm, MultiSelect, Select};
use native_dialog::FileDialog;
use std::{
    env::args,
    fs::{read_to_string, symlink_metadata},
    os::windows::fs::{symlink_dir, FileTypeExt},
    path::{self, PathBuf},
};

fn main() {
    //get current working directory
    let cwd = std::env::current_dir().unwrap();
    println!("Current working directory: {}", cwd.display());

    // let args: Vec<String> = args().collect();

    let first_run = !exists("csht_config.ini");

    let actions = &["App settings", "Hashtable settings", "Update", "Exit"];

    if first_run {
        println!("First run detected");
        app_setup(&cwd);
    }

    loop {
        let action = Select::with_theme(&ColorfulTheme::default())
            .with_prompt("Pick an option")
            .default(0)
            .items(&actions[..])
            .interact()
            .unwrap();

        println!("Selection: {}", action);
        if action == 0 {
            app_setup(&cwd)
        } else if action == 1 {
            hash_setup(&cwd)
        } else if action == 2 {
            update(&cwd)
        } else {
            break;
        }
    }
    let compatibility: bool = std::fs::read_to_string("config.ini")
        .unwrap()
        .contains("compatibility=true");

    if compatibility {
        let file1 = format!("{}\\hashes\\{}", cwd.display(), "hashes.game.txt.0");
        let file2 = format!("{}\\hashes\\{}", cwd.display(), "hashes.game.txt.1");
        let file3 = format!("{}\\hashes\\{}", cwd.display(), "hashes.game.txt");
        join_files(&file1, &file2, &file3);
        println!("Compatibility files created: {}", file3);
    }
}

fn app_setup(cwd: &PathBuf) {
    if !exists("hash_dirs.txt") {
        std::fs::write("hash_dirs.txt", "").unwrap();
        std::fs::create_dir_all(format!("{}\\hashes", cwd.display())).unwrap();
    }
    let options = &["Legacy support", "Weekly update", "Use symlinks"];
    let mut defaults: Vec<bool> = Vec::new();
    if exists("csht_config.ini") {
        let compat: bool = std::fs::read_to_string("csht_config.ini")
            .unwrap()
            .contains("compatibility=true");
        let weekly: bool = exists(&format!(
            "{}\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\cshtupdater.bat",
            std::env::var("APPDATA").unwrap()
        ));
        let symlink: bool = std::fs::read_to_string("csht_config.ini")
            .unwrap()
            .contains("symlink=true");

        defaults = (&[compat, weekly, symlink]).to_vec();
    } else {
        defaults = (&[false, false, false]).to_vec();
    }

    let selections = MultiSelect::with_theme(&ColorfulTheme::default())
        .with_prompt("Select features that you want to enable")
        .items(&options[..])
        .defaults(&defaults[..])
        .interact()
        .unwrap();

    let config = format!(
        "compatibility={}\nsymlink={}",
        selections.contains(&0),
        selections.contains(&2)
    );

    let shortcut_path = format!(
        "{}\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\cshtupdater.bat",
        std::env::var("APPDATA").unwrap()
    );
    if selections.contains(&1) {
        println!("Weekly update enabled");
        if std::fs::metadata(&shortcut_path).is_err() {
            let content = format!("cd {}\n\\cshtupdater.exe", cwd.display());
            std::fs::write(&shortcut_path, content).unwrap();
            println!("Shortcut created: {}", shortcut_path);
        }
    } else {
        if exists(&shortcut_path) {
            std::fs::remove_file(&shortcut_path).unwrap();
            println!("Weekly update disabled");
        }
    }

    std::fs::write("csht_config.ini", config).unwrap();
}

fn hash_setup(cwd: &PathBuf) {
    let symlink: bool = std::fs::read_to_string("csht_config.ini")
        .unwrap()
        .contains("symlink=true");
    let mut loop_flag = true;
    while loop_flag {
        let dirs = read_lines("hash_dirs.txt");
        let actions = &["Add a directory", "Remove a directory", "Back"];

        let action = Select::with_theme(&ColorfulTheme::default())
            .with_prompt("Pick an option")
            .default(2)
            .items(&actions[..])
            .interact()
            .unwrap();

        match action {
            0 => {
                println!("Select a directory to add");
                let path = FileDialog::new()
                    .set_location(&cwd)
                    .show_open_single_dir()
                    .unwrap();
                let mut new_dirs = dirs.clone();
                new_dirs.push(path.unwrap().to_str().unwrap().to_string());
                std::fs::write("hash_dirs.txt", new_dirs.join("\n")).unwrap();
                if symlink {
                    let path = PathBuf::from(new_dirs.last().unwrap());
                    let new = path.clone();
                    let org = format!("{}\\hashes", path.display());
                    create_symlink(&org, new.to_str().unwrap());
                } else {
                    let path = PathBuf::from(new_dirs.last().unwrap());
                    let new = path.clone();
                    let metadata = std::fs::metadata(&path).unwrap();
                    remove_symlink(directory)
                    println!("Symlink removed");
                }
            }
            1 => {
                let dirs = read_lines("hash_dirs.txt");
                if (dirs.len() == 0) {
                    println!("No directories to remove");
                    break;
                }
                let selection = MultiSelect::with_theme(&ColorfulTheme::default())
                    .with_prompt("Select directories to remove")
                    .items(&dirs[..])
                    .interact()
                    .unwrap();
                let mut new_dirs = Vec::new();
                for (i, dir) in dirs.iter().enumerate() {
                    if !selection.contains(&i) {
                        new_dirs.push(dir.clone());
                    } else {
                        let path = PathBuf::from(dir);
                        let metadata = std::fs::metadata(&path).unwrap();
                        if metadata.file_type().is_symlink_dir() {
                            std::fs::remove_dir_all(path).unwrap();
                            std::fs::create_dir_all(dir).unwrap();
                        }
                    }
                }
                std::fs::write("hash_dirs.txt", new_dirs.join("\n")).unwrap();
            }
            2 => {
                loop_flag = false;
                break;
            }
            _ => {
                println!("Invalid selection");
                break;
            }
        }
    }
}

fn exists(file_path: &str) -> bool {
    std::fs::metadata(file_path).is_ok()
}

fn join_files(file1: &str, file2: &str, file3: &str) {
    let content1 = std::fs::read_to_string(file1).unwrap();
    let content2 = std::fs::read_to_string(file2).unwrap();
    let content3 = format!("{}\n{}", content1, content2);
    std::fs::write(file3, content3).unwrap();
}

fn check_flag(args: Vec<String>, flag: &str) -> bool {
    args.iter().any(|arg| arg == flag)
}

fn read_lines(filename: &str) -> Vec<String> {
    let mut result = Vec::new();

    for line in read_to_string(filename).unwrap().lines() {
        if !result.contains(&line.to_string()) {
            result.push(line.to_string());
        }
    }

    result
}

fn update(cwd: &PathBuf) {
    let compatibility: bool = std::fs::read_to_string("csht_config.ini")
        .unwrap()
        .contains("compatibility=true");

    let links =
        vec![
            "https://raw.githubusercontent.com/CommunityDragon/Data/master/hashes/lol/hashes.binentries.txt",
            "https://raw.githubusercontent.com/CommunityDragon/Data/master/hashes/lol/hashes.binfields.txt",
            "https://raw.githubusercontent.com/CommunityDragon/Data/master/hashes/lol/hashes.binhashes.txt",
            "https://raw.githubusercontent.com/CommunityDragon/Data/master/hashes/lol/hashes.bintypes.txt",
            "https://raw.githubusercontent.com/CommunityDragon/Data/master/hashes/lol/hashes.game.txt.0",
            "https://raw.githubusercontent.com/CommunityDragon/Data/master/hashes/lol/hashes.game.txt.1",
            "https://raw.githubusercontent.com/CommunityDragon/Data/master/hashes/lol/hashes.lcu.txt",
            "https://raw.githubusercontent.com/CommunityDragon/Data/master/hashes/lol/hashes.rst.txt"
        ];
    let files: Vec<&str> = vec![
        "hashes.binentries.txt",
        "hashes.binfields.txt",
        "hashes.binhashes.txt",
        "hashes.bintypes.txt",
        "hashes.game.txt.0",
        "hashes.game.txt.1",
        "hashes.lcu.txt",
        "hashes.rst.txt",
    ];

    let force = check_flag(args().collect(), "--force");
    for (i, link) in links.iter().enumerate() {
        //concat working directory with filename
        let file = format!("{}\\hashes\\{}", cwd.display(), files[i]);
        let exists: bool = exists(&file);

        if !exists || force {
            let response = reqwest::blocking::get(*link).unwrap();
            std::fs::write(&file, response.text().unwrap()).unwrap();
            if force {
                println!("File updated: {}", file);
            } else {
                println!("File downloaded: {}", file);
            }
        } else {
            let recently_updated: bool = check_if_recently_updated(&file);
            if !recently_updated {
                let response = reqwest::blocking::get(*link).unwrap();
                std::fs::write(&file, response.text().unwrap()).unwrap();
                println!("File updated: {}", file);
            } else {
                println!("File updated in the last 7 days: {}", file);
            }
        }
    }
}
fn check_if_recently_updated(file_path: &str) -> bool {
    let metadata = std::fs::metadata(file_path).unwrap();
    let modified = metadata.modified().unwrap();
    let now = std::time::SystemTime::now();
    let duration = now.duration_since(modified).unwrap();
    let secs = duration.as_secs();
    return secs < 60 * 60 * 24 * 7;
}

fn create_symlink(org: &str, new: &str) {
    let path = PathBuf::from(org);
    let new = path.clone();
    let metadata = std::fs::metadata(&path).unwrap();
    if !metadata.file_type().is_symlink_dir() {
        std::fs::remove_dir_all(path).unwrap();
        symlink_dir(org, new).unwrap();
    }
    println!("Symlink created");
}
fn remove_symlink(directory: &str) {
    let path = PathBuf::from(directory);
    let new = path.clone();
    let metadata = std::fs::metadata(&path).unwrap();
    if metadata.file_type().is_symlink_dir() {
        std::fs::remove_dir_all(path).unwrap();
        std::fs::create_dir_all(new).unwrap();
    }
    println!("Symlink removed");
}
